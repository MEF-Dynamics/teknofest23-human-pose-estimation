import cv2
import math
import numpy as np
import mediapipe as mp
import os
from os import listdir
import pandas as pd
from PIL import Image
import numpy as np

def findDistance(x1, y1, x2, y2):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist

def findAngle(x1, y1, x2, y2):
    theta = math.acos((y2 - y1) * (-y1) / (math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) * y1))
    degree = int(180 / math.pi) * theta
    return degree

font = cv2.FONT_HERSHEY_SIMPLEX

blue = (255, 127, 0)
red = (50, 50, 255)
green = (127, 255, 0)
dark_blue = (127, 20, 0)
light_green = (127, 233, 100)
yellow = (0, 255, 255)
pink = (255, 0, 255)

mp_pose = mp.solutions.pose
mp_draw = mp.solutions.drawing_utils
pose_image = mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5)
folder_path="C:\\Users\pelin\Desktop\pose-estimation\pose_estimation_photos"
folder_dir=os.listdir(folder_path)
df=pd.DataFrame(columns=["image_name", "neck_to_back", "body_to_back"])
total=0
for image in folder_dir:
    try:
        image_name=image
        image_path=os.path.join(folder_path,image)
        original_image = cv2.imread(image_path)
        image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
        keypoints = pose_image.process(image)  #results --> keypoints
        image= cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        lm = keypoints.pose_landmarks
        lmPose=mp_pose.PoseLandmark
        h,w=original_image.shape[:2]
        l_shldr_x = int(lm.landmark[lmPose.LEFT_SHOULDER].x * w)
        l_shldr_y = int(lm.landmark[lmPose.LEFT_SHOULDER].y * h)
        r_shldr_x = int(lm.landmark[lmPose.RIGHT_SHOULDER].x * w)
        r_shldr_y = int(lm.landmark[lmPose.RIGHT_SHOULDER].y * h)
        l_ear_x = int(lm.landmark[lmPose.LEFT_EAR].x * w)
        l_ear_y = int(lm.landmark[lmPose.LEFT_EAR].y * h)
        l_hip_x = int(lm.landmark[lmPose.LEFT_HIP].x * w)
        l_hip_y = int(lm.landmark[lmPose.LEFT_HIP].y * h)
        neck_to_back = findAngle(l_shldr_x, l_shldr_y, l_ear_x, l_ear_y)
        body_to_back = findAngle(l_hip_x, l_hip_y, l_shldr_x, l_shldr_y)
        yellow = (0, 255, 255)
        pink = (255, 0, 255)
        cv2.circle(image, (l_shldr_x, l_shldr_y), 7, yellow, -1)
        cv2.circle(image, (l_ear_x, l_ear_y), 7, yellow, -1)
        cv2.circle(image, (l_shldr_x, l_shldr_y - 100), 7, yellow, -1)
        cv2.circle(image, (r_shldr_x, r_shldr_y), 7, pink, -1)
        cv2.circle(image, (l_hip_x, l_hip_y), 7, yellow, -1)
        cv2.circle(image, (l_hip_x, l_hip_y - 100), 7, yellow, -1)
        df.loc[total]=[image_name, neck_to_back, body_to_back]
        total+=1
    except:
        print("No pose detected")

zeros=np.zeros(total, dtype=int)
df["is_posture_okay"]=zeros
df.to_csv("C:\\Users\pelin\Desktop\pose-estimation\pose_estimation_photos\pose_data.csv", index=False)
        
